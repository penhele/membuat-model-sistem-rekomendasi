# -*- coding: utf-8 -*-
"""notebook-movie-recommendation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q9tksv0b7VREay7-P6bDkZO_EXhRYnbw

# Import Library
"""

from google.colab import userdata

import ast
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

"""# Memuat Dataset"""

# Ambil kredensial dari Google Colab Secrets
kaggle_username = userdata.get('kaggle_username')  # Nama pengguna
kaggle_key = userdata.get('kaggle_key')     # Kunci API

# Set variabel lingkungan untuk Kaggle
os.environ['KAGGLE_USERNAME'] = kaggle_username
os.environ['KAGGLE_KEY'] = kaggle_key

!kaggle datasets download -d CooperUnion/anime-recommendations-database

!unzip anime-recommendations-database.zip

df_anime = pd.read_csv('anime.csv')

df_rating = pd.read_csv('rating.csv')

"""# Exploratory Data Analysis (EDA)

## Anime Variabel

Menampilkan Isi dan Struktur Dataset Anime
"""

df_anime.head()

df_anime.info()

all_genres = df_anime['genre'].dropna().str.split(', ')
flat_genres = [genre for sublist in all_genres for genre in sublist]
genre_counts = Counter(flat_genres)
top5_genres = genre_counts.most_common(5)

df_top_genres = pd.DataFrame(top5_genres, columns=['Genre', 'Count'])

plt.figure(figsize=(8,5))
sns.barplot(data=df_top_genres, x='Genre', y='Count', palette='viridis')
plt.title('Top 5 Genre Paling Banyak di Dataset Anime')
plt.ylabel('Jumlah Anime')
plt.xlabel('Genre')
plt.show()

"""Insight : Dari output ini, kita dapat melihat seberapa lengkap data dan menilai kualitas dataset anime untuk analisis lebih lanjut seperti pembuatan sistem rekomendasi anime. Kemudian pada visualisasi terdapat genre terbanyak pada dataset ini. Genre Comedy menjadi genre paling banyak.

## Rating Variabel

Menampilkan Isi dan Struktur Dataset Rating
"""

df_rating.head()

df_rating.info()

df_rating = df_rating[df_rating.user_id <= 10000]

df_rating.info()

rating_counts = df_rating['anime_id'].value_counts().head(5)

top5_rated_anime = pd.DataFrame({
    'anime_id': rating_counts.index,
    'rating_count': rating_counts.values
}).merge(df_anime[['anime_id', 'name']], on='anime_id')

plt.figure(figsize=(10,6))
sns.barplot(data=top5_rated_anime, x='rating_count', y='name', hue='name', dodge=False, legend=False)
plt.title('Top 5 Anime dengan Jumlah Rating Terbanyak')
plt.xlabel('Jumlah Rating')
plt.ylabel('Nama Anime')
plt.show()

"""Insight : Dari output ini, kita dapat melihat seberapa lengkap data dan menilai kualitas dataset rating untuk analisis lebih lanjut seperti pembuatan sistem rekomendasi anime. Kode `df_rating = df_rating[df_rating.user_id <= 10000]` digunakan untuk mengambil user_id di bawah 10000. Hal ini agar pada proses rekomendasi tidak terlalu banyak mengambil data. Lalu pada visualisasi Anime `Death Note` menjadi rating terbanyak.

# Data Preparation

## Mengatasi Rating Tidak Valid

Membersihkan nilai rating tidak valid pada dataset rating
"""

df_rating['rating'].unique()

df_rating['rating'] = df_rating['rating'].replace(-1, pd.NA)

"""Insight :
- `df_rating['rating'].unique()` digunakan untuk mengecek semua nilai unik yang terdapat dalam kolom rating. Ini berguna untuk menemukan adanya nilai tidak valid atau anomali, seperti -1 yang biasanya menandakan bahwa user belum memberi rating sebenarnya (misalnya hanya menonton tapi tidak menilai).

- `df_rating['rating'] = df_rating['rating'].replace(-1, pd.NA)` mengganti semua nilai -1 dengan pd.NA (missing value dalam Pandas). Ini penting agar model rekomendasi tidak menganggap -1 sebagai rating numerik yang valid. Nilai -1 berarti pengguna menonton tetapi tidak menilai anime tersebut.

## Mengatasi Missing Value

Membersihkan nilai kosong pada dataset anime dan rating
"""

df_anime.isnull().sum()

df_anime.dropna(inplace=True)

df_rating.isnull().sum()

"""Insight :
- Pada dataset anime, terdapat nilai null pada kolom genre, type, dan rating. Karena tidak jumlah null masih tergolong sedikkit, jadi diputuskan untuk menghapus nilai null tersebut.
- Pada dataset rating, terdapat banyak sekali nilai null pada kolom rating. Hal ini disebabkan pada kode sebelumnya bahwa mengganti nilai anomali (-1) menjadi NaN. Karena -1 adalah pengguna yang menonton tetapi tidak menilai, maka akan dibiarkan saja. Hal ini dibiarkan untuk nanti diproses pada modeling.

## Mengatasi Duplicated Value

Membersihkan nilai duplikat pada dataset anime dan rating
"""

df_anime.duplicated().sum()

df_rating.duplicated().sum()

"""Insight : Kode tersebut digunakan untuk mendeteksi apakah ada data duplikat pada kedua dataset, yaitu `df_anime` dan `df_rating`. Fungsi `df_anime.duplicated().sum()` dan `df_rating.duplicated().sum()` menghitung jumlah baris yang terdeteksi sebagai duplikat dalam masing-masing dataframe. Hasil dari kedua perintah tersebut adalah `np.int64(0)`, yang berarti **tidak ada baris duplikat** yang ditemukan dalam kedua dataset. Ini menunjukkan bahwa data yang digunakan sudah bersih dari duplikasi, sehingga tidak perlu dilakukan penghapusan duplikat. Hal ini penting karena data duplikat dapat menyebabkan bias dalam perhitungan rekomendasi, terutama jika rating yang sama dihitung lebih dari sekali.

# Model Development

## Content Based Filtering

### Tfidf Vectorizer

Meng-ekstraksi fitur genre menggunakan TfidfVectorizer
"""

vec = TfidfVectorizer(stop_words='english', tokenizer=lambda x: x.split(', '))
genre_matrix = vec.fit_transform(df_anime["genre"])

"""Insight:
Kode tersebut menggunakan `TfidfVectorizer` untuk mengubah data genre anime menjadi representasi numerik berbobot berdasarkan frekuensi relatif setiap genre. Dengan `tokenizer=lambda x: x.split(', ')`, genre dipisah per kata kunci (misalnya "Action", "Comedy"), sehingga genre yang lebih unik mendapat bobot lebih tinggi. Hasilnya adalah matriks TF-IDF (`genre_matrix`) yang dapat digunakan untuk menghitung kesamaan antar anime, misalnya dalam sistem rekomendasi.

### Cosine Similarity

Menghitung kemiripan antara anime berdasarkan genre dengan Cosine Similarity
"""

anime_similarity = cosine_similarity(genre_matrix, genre_matrix)
anime_similarity

"""Insight:
`cosine_similarity(genre_matrix, genre_matrix)` menghitung tingkat kemiripan antar anime berdasarkan vektor TF-IDF genre mereka. Nilai pada `anime_similarity` berkisar antara 0 hingga 1, di mana angka yang lebih tinggi menunjukkan kemiripan genre yang lebih besar. Matriks ini berguna dalam sistem content-based filtering untuk merekomendasikan anime dengan genre serupa, meskipun user belum banyak memberikan rating, karena cukup mengandalkan informasi konten.

### Mendapatkan Rekomendasi

Rekomendasi anime berdasarkan genre yang mirip
"""

def recommend(title, cosine_sim=anime_similarity):
    idx = df_anime[df_anime['name'] == title].index[0]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:6]
    anime_indices = [i[0] for i in sim_scores]
    return df_anime['name'].iloc[anime_indices]

recommend("Naruto")

"""Insight:
Fungsi `recommend()` menghasilkan 5 anime dengan genre paling mirip terhadap judul yang diberikan, berdasarkan nilai tertinggi dari cosine similarity. Ini merupakan penerapan sederhana content-based filtering yang memanfaatkan kemiripan konten (genre) untuk memberikan rekomendasi yang relevan.

# Metrik Evaluasi

Untuk mengevaluasi kinerja model rekomendasi berbasis konten, digunakan metrik Precision@K.
"""

def precision_at_k(title, k=5):
    try:
        recommended = recommend(title, anime_similarity).tolist()
        original_genres = set(df_anime[df_anime['name'] == title]['genre'].values[0].split(', '))

        relevant = 0
        for rec in recommended[:k]:
            rec_genres = set(df_anime[df_anime['name'] == rec]['genre'].values[0].split(', '))
            if len(original_genres.intersection(rec_genres)) > 0:
                relevant += 1

        return relevant / k
    except IndexError:
        return f"Anime dengan nama '{title}' tidak ditemukan."

print(precision_at_k("Naruto"))

"""Insight:
Precision\@K pada sistem rekomendasi anime mengukur seberapa relevan rekomendasi yang diberikan berdasarkan kemiripan genre dengan anime asal. Dalam kasus ini, nilai precision sebesar 1.0 untuk anime *Naruto* menunjukkan bahwa semua rekomendasi yang diberikan memiliki kesamaan genre dengan *Naruto*, menandakan bahwa sistem mampu menyarankan anime yang sesuai secara tematik. Meskipun ini merupakan indikasi positif terhadap akurasi sistem, evaluasi berbasis genre saja belum sepenuhnya mencerminkan relevansi menyeluruh dari sisi cerita, kualitas, atau preferensi pengguna secara individual.

"""